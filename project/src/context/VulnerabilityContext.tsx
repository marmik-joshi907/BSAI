import React, { createContext, useContext, useState, ReactNode } from 'react';

export interface Vulnerability {
  id: string;
  type: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  file: string;
  line: number;
  description: string;
  code: string;
  suggestion: string;
  fixedCode: string;
}

export interface ScanResults {
  totalFiles: number;
  vulnerabilities: Vulnerability[];
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    riskScore: number;
  };
}

interface VulnerabilityContextType {
  scanResults: ScanResults | null;
  setScanResults: (results: ScanResults | null) => void;
}

const VulnerabilityContext = createContext<VulnerabilityContextType | undefined>(undefined);

export function VulnerabilityProvider({ children }: { children: ReactNode }) {
  const [scanResults, setScanResults] = useState<ScanResults | null>(null);

  return (
    <VulnerabilityContext.Provider value={{ scanResults, setScanResults }}>
      {children}
    </VulnerabilityContext.Provider>
  );
}

export function useVulnerability() {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerability must be used within a VulnerabilityProvider');
  }
  return context;
}